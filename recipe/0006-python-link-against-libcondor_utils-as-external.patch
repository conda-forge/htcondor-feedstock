From 10d5760d2323419b0305796e78863778473bad1a Mon Sep 17 00:00:00 2001
From: "duncan.macleod" <duncan.macleod@ligo.org>
Date: Sat, 5 Nov 2022 16:55:43 +0000
Subject: [PATCH 06/11] python: link against libcondor_utils as external

don't use the CMake target, so that we don't have to rebuild libcondor_utils when build the Python bindings
---
 src/python-bindings/CMakeLists.txt | 35 ++++++++++++++++--------------
 1 file changed, 19 insertions(+), 16 deletions(-)

diff --git a/src/python-bindings/CMakeLists.txt b/src/python-bindings/CMakeLists.txt
index e28d739e78..80d9f20e00 100644
--- a/src/python-bindings/CMakeLists.txt
+++ b/src/python-bindings/CMakeLists.txt
@@ -1,6 +1,9 @@
 # We'll be deprecating event.cpp shortly.
 set( HTCONDOR_BINDINGS_SOURCES collector.cpp negotiator.cpp config.cpp daemon_and_ad_types.cpp daemon_location.cpp dc_tool.cpp export_headers.h old_boost.h schedd.cpp credd.cpp secman.cpp event.cpp module_lock.cpp export_compat_classad.cpp enable_deprecation_warnings.cpp claim.cpp startd.cpp bulk_query_iterator.cpp JobEventLog.cpp exception_utils.cpp )
 
+get_target_property(UTILS_LIB_NAME condor_utils OUTPUT_NAME)
+find_library(CLASSAD_LIBRARY classad)
+
 if(WINDOWS)
   if(WITH_PYTHON_BINDINGS AND PYTHONLIBS_FOUND)
     # Modern compilers complain about using the deprecated std::auto_ptr.
@@ -71,7 +74,7 @@ if(WINDOWS)
 				endif()
 
 				condor_shared_lib( pyclassad classad.cpp classad_wrapper.h exprtree_wrapper.h exception_utils.cpp classad_exceptions.cpp )
-				target_link_libraries( pyclassad ${CLASSADS_FOUND} ${THE_BOOST_LIBS} ${PYTHON_LIBRARIES} )
+				target_link_libraries( pyclassad ${CLASSAD_LIBRARY} ${THE_BOOST_LIBS} ${PYTHON_LIBRARIES} )
 				set_target_properties( pyclassad PROPERTIES OUTPUT_NAME "${PYCLASSAD_LIB_NAME}" )
 				target_include_directories( pyclassad PUBLIC ${PYTHON_INCLUDE_DIRS} )
 
@@ -87,13 +90,13 @@ if(WINDOWS)
 				# This is to be used as a CLASSAD_USER_LIBS extension so we can invoke
 				# python functions.
 				add_library( classad_python_user SHARED classad_python_user.cpp )
-				target_link_libraries( classad_python_user condor_utils pyclassad ${CONDOR_WIN_LIBS})
+				target_link_libraries( classad_python_user ${UTILS_LIB_NAME} pyclassad ${CONDOR_WIN_LIBS})
 				set_target_properties(classad_python_user PROPERTIES SUFFIX "${PYTHON_DLL_SUFFIX}" )
 				target_include_directories( classad_python_user PUBLIC ${PYTHON_INCLUDE_DIRS} )
 				install ( TARGETS classad_python_user DESTINATION "${C_LIBEXEC}" )
 
 				add_library( htcondor SHARED htcondor.cpp ${HTCONDOR_BINDINGS_SOURCES} )
-				target_link_libraries( htcondor pyclassad condor_utils ${THE_BOOST_LIBS} ${PYTHON_LIBRARIES} ${CONDOR_WIN_LIBS} )
+				target_link_libraries( htcondor pyclassad ${UTILS_LIB_NAME} ${THE_BOOST_LIBS} ${PYTHON_LIBRARIES} ${CONDOR_WIN_LIBS} )
 				set_target_properties( htcondor PROPERTIES SUFFIX "${PYTHON_DLL_SUFFIX}" )
 				target_include_directories( htcondor PUBLIC ${PYTHON_INCLUDE_DIRS} )
 
@@ -137,7 +140,7 @@ if(WINDOWS)
 					)
 
 				condor_shared_lib( py3classad classad.cpp classad_wrapper.h exprtree_wrapper.h exception_utils.cpp classad_exceptions.cpp )
-				target_link_libraries( py3classad ${CLASSADS_FOUND} ${THE_BOOST_LIBS} ${PYTHON3_LIBRARIES} )
+				target_link_libraries( py3classad ${CLASSAD_LIBRARY} ${THE_BOOST_LIBS} ${PYTHON3_LIBRARIES} )
 				set_target_properties( py3classad PROPERTIES OUTPUT_NAME "${PY3CLASSAD_LIB_NAME}" )
 				target_include_directories( py3classad PUBLIC ${PYTHON3_INCLUDE_DIRS} )
 
@@ -154,14 +157,14 @@ if(WINDOWS)
 				# This is to be used as a CLASSAD_USER_LIBS extension so we can invoke
 				# python functions.
 				add_library( classad_python3_user SHARED classad_python_user.cpp )
-				target_link_libraries( classad_python3_user condor_utils py3classad ${THE_BOOST_LIBS} ${CONDOR_WIN_LIBS})
+				target_link_libraries( classad_python3_user ${UTILS_LIB_NAME} py3classad ${THE_BOOST_LIBS} ${CONDOR_WIN_LIBS})
 				set_target_properties(classad_python3_user PROPERTIES PREFIX "" OUTPUT_NAME classad_python_user PDB_NAME classad_python3_user)
 				set_target_properties(classad_python3_user PROPERTIES SUFFIX "${PYTHON3_DLL_SUFFIX}" )
 				target_include_directories( classad_python3_user PUBLIC ${PYTHON3_INCLUDE_DIRS} )
 				install ( TARGETS classad_python3_user DESTINATION "${C_LIBEXEC}" )
 
 				add_library( py3htcondor SHARED htcondor.cpp ${HTCONDOR_BINDINGS_SOURCES} )
-				target_link_libraries( py3htcondor py3classad condor_utils ${THE_BOOST_LIBS} ${PYTHON3_LIBRARIES} ${CONDOR_WIN_LIBS} )
+				target_link_libraries( py3htcondor py3classad ${UTILS_LIB_NAME} ${THE_BOOST_LIBS} ${PYTHON3_LIBRARIES} ${CONDOR_WIN_LIBS} )
 				set_target_properties( py3htcondor PROPERTIES PREFIX "" OUTPUT_NAME py3htcondor PDB_NAME py3htcondor)
 				set_target_properties( py3htcondor PROPERTIES PREFIX "" RUNTIME_OUTPUT_NAME htcondor PDB_NAME py3htcondor)
 				set_target_properties( py3htcondor PROPERTIES SUFFIX "${PYTHON3_DLL_SUFFIX}" )
@@ -235,7 +238,7 @@ else()
       endif()
       condor_shared_lib( pyclassad classad.cpp classad_wrapper.h exprtree_wrapper.h exception_utils.cpp classad_exceptions.cpp )
       target_include_directories( pyclassad PUBLIC ${PYTHON_INCLUDE_DIRS} )
-      target_link_libraries( pyclassad ${CLASSADS_FOUND} -l${PYTHON_BOOST_LIB} ${PYTHON_LIBRARIES} )
+      target_link_libraries( pyclassad ${CLASSAD_LIBRARY} -l${PYTHON_BOOST_LIB} ${PYTHON_LIBRARIES} )
       set_target_properties( pyclassad PROPERTIES OUTPUT_NAME "${PYCLASSAD_LIB_NAME}" )
       set_target_properties( pyclassad PROPERTIES COMPILE_FLAGS "-fPIC")
 
@@ -253,7 +256,7 @@ else()
       # python functions.
       add_library( classad_python_user SHARED classad_python_user.cpp )
       target_include_directories( classad_python_user PUBLIC ${PYTHON_INCLUDE_DIRS} )
-      target_link_libraries( classad_python_user condor_utils pyclassad )
+      target_link_libraries( classad_python_user ${UTILS_LIB_NAME} pyclassad )
       set_target_properties(classad_python_user PROPERTIES SUFFIX "${PYTHON_MODULE_SUFFIX}" )
       if ( NOT CMAKE_SKIP_RPATH )
         set_target_properties(classad_python_user PROPERTIES INSTALL_RPATH "${CONDOR_RPATH}")
@@ -264,7 +267,7 @@ else()
         # This is to be used as a collector plugin module which invoke python functions.
         add_library( collector_python_plugin SHARED collector_plugin.cpp )
         target_include_directories( collector_python_plugin PUBLIC ${PYTHON_INCLUDE_DIRS} )
-        target_link_libraries( collector_python_plugin condor_utils pyclassad )
+        target_link_libraries( collector_python_plugin ${UTILS_LIB_NAME} pyclassad )
         set_target_properties( collector_python_plugin PROPERTIES SUFFIX "${PYTHON_MODULE_SUFFIX}" )
         if ( NOT CMAKE_SKIP_RPATH )
           set_target_properties( collector_python_plugin PROPERTIES INSTALL_RPATH "${CONDOR_RPATH}")
@@ -277,7 +280,7 @@ else()
       # We should probably deprecate log_reader.cpp (shortly after we deprecate event.cpp).
       add_library( htcondor SHARED htcondor.cpp ${HTCONDOR_BINDINGS_SOURCES} log_reader.cpp )
       target_include_directories( htcondor PUBLIC ${PYTHON_INCLUDE_DIRS} )
-      target_link_libraries( htcondor pyclassad condor_utils -l${PYTHON_BOOST_LIB} ${PYTHON_LIBRARIES} )
+      target_link_libraries( htcondor pyclassad ${UTILS_LIB_NAME} -l${PYTHON_BOOST_LIB} ${PYTHON_LIBRARIES} )
       set_target_properties( htcondor PROPERTIES PREFIX "" )
       set_target_properties( htcondor PROPERTIES SUFFIX "${PYTHON_MODULE_SUFFIX}" )
       if ( NOT CMAKE_SKIP_RPATH )
@@ -324,7 +327,7 @@ else()
       endif()
       condor_shared_lib( py3classad classad.cpp classad_wrapper.h exprtree_wrapper.h exception_utils.cpp classad_exceptions.cpp )
       target_include_directories( py3classad PUBLIC ${PYTHON3_INCLUDE_DIRS} )
-      target_link_libraries( py3classad ${CLASSADS_FOUND} -l${PYTHON3_BOOST_LIB} ${PYTHON3_LIBRARIES} )
+      target_link_libraries( py3classad ${CLASSAD_LIBRARY} -l${PYTHON3_BOOST_LIB} ${PYTHON3_LIBRARIES} )
       set_target_properties( py3classad PROPERTIES OUTPUT_NAME "${PY3CLASSAD_LIB_NAME}" )
       set_target_properties( py3classad PROPERTIES COMPILE_FLAGS "-fPIC")
 
@@ -342,7 +345,7 @@ else()
       # python functions.
       add_library( classad_python3_user SHARED classad_python_user.cpp )
       target_include_directories( classad_python3_user PUBLIC ${PYTHON3_INCLUDE_DIRS} )
-      target_link_libraries( classad_python3_user condor_utils py3classad )
+      target_link_libraries( classad_python3_user ${UTILS_LIB_NAME} py3classad )
       set_target_properties( classad_python3_user PROPERTIES OUTPUT_NAME classad_python_user )
       set_target_properties( classad_python3_user PROPERTIES SUFFIX "${PYTHON3_MODULE_SUFFIX}" )
       if ( NOT CMAKE_SKIP_RPATH )
@@ -358,7 +361,7 @@ else()
         # This is to be used as a collector plugin module which invoke python functions.
         add_library( collector_python3_plugin SHARED collector_plugin.cpp )
         target_include_directories( collector_python3_plugin PUBLIC ${PYTHON3_INCLUDE_DIRS} )
-        target_link_libraries( collector_python3_plugin condor_utils py3classad )
+        target_link_libraries( collector_python3_plugin ${UTILS_LIB_NAME} py3classad )
         set_target_properties( collector_python3_plugin PROPERTIES OUTPUT_NAME collector_python_plugin )
         set_target_properties( collector_python3_plugin PROPERTIES SUFFIX "${PYTHON3_MODULE_SUFFIX}" )
         if ( NOT CMAKE_SKIP_RPATH )
@@ -376,7 +379,7 @@ else()
       # We should probably deprecate log_reader.cpp (shortly after we deprecate event.cpp).
       add_library( py3htcondor SHARED htcondor.cpp ${HTCONDOR_BINDINGS_SOURCES} log_reader.cpp )
       target_include_directories( py3htcondor PUBLIC ${PYTHON3_INCLUDE_DIRS} )
-      target_link_libraries( py3htcondor py3classad condor_utils -l${PYTHON3_BOOST_LIB} ${PYTHON3_LIBRARIES} )
+      target_link_libraries( py3htcondor py3classad ${UTILS_LIB_NAME} -l${PYTHON3_BOOST_LIB} ${PYTHON3_LIBRARIES} )
       set_target_properties( py3htcondor PROPERTIES PREFIX "" OUTPUT_NAME htcondor )
       set_target_properties( py3htcondor PROPERTIES SUFFIX "${PYTHON3_MODULE_SUFFIX}" )
       if ( NOT CMAKE_SKIP_RPATH )
@@ -412,7 +415,7 @@ else()
 
       # build libpyclassad *not* linked against libpython
       add_library( wheel_pyclassad SHARED classad.cpp classad_wrapper.h exprtree_wrapper.h exception_utils.cpp classad_exceptions.cpp )
-      target_link_libraries( wheel_pyclassad ${CLASSADS_FOUND} -l${PYTHON_BOOST_LIB} ${NOLINK_PYTHON_LIB} )
+      target_link_libraries( wheel_pyclassad ${CLASSAD_LIBRARY} -l${PYTHON_BOOST_LIB} ${NOLINK_PYTHON_LIB} )
       if ( DARWIN )
         set_target_properties( wheel_pyclassad PROPERTIES SUFFIX ".dylib" )
         set_target_properties( wheel_pyclassad PROPERTIES INSTALL_NAME_DIR "${WHEEL_BINARY_DIR}/htcondor/htcondor_libs" )
@@ -435,7 +438,7 @@ else()
       # finally, build the htcondor module *not* linked against libpython
       # See note above about deprecating log_reader.cpp.
       add_library( wheel_htcondor SHARED htcondor.cpp ${HTCONDOR_BINDINGS_SOURCES} log_reader.cpp )
-      target_link_libraries( wheel_htcondor wheel_pyclassad condor_utils -l${PYTHON_BOOST_LIB} ${NOLINK_PYTHON_LIB} )
+      target_link_libraries( wheel_htcondor wheel_pyclassad ${UTILS_LIB_NAME} -l${PYTHON_BOOST_LIB} ${NOLINK_PYTHON_LIB} )
       set_target_properties( wheel_htcondor PROPERTIES PREFIX "" OUTPUT_NAME "htcondor" SUFFIX ".so")
       set_target_properties( wheel_htcondor PROPERTIES LIBRARY_OUTPUT_DIRECTORY "${WHEEL_BINARY_DIR}/htcondor" )
       if ( NOT DARWIN )
-- 
2.20.1

