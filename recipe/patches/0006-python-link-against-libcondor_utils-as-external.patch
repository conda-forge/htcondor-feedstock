From 9360f590456e03b47656674a888e266d83780d10 Mon Sep 17 00:00:00 2001
From: Duncan Macleod <duncan.macleod@ligo.org>
Date: Fri, 14 Jan 2022 11:50:32 +0000
Subject: [PATCH 06/11] python: link against libcondor_utils as external

don't use the CMake target, so that we don't have to rebuild libcondor_utils when building the Python bindings
---
 src/python-bindings/CMakeLists.txt | 43 ++++++++++++++++--------------
 1 file changed, 23 insertions(+), 20 deletions(-)

diff --git a/src/python-bindings/CMakeLists.txt b/src/python-bindings/CMakeLists.txt
index c1dac7274b..8e70a44bf0 100644
--- a/src/python-bindings/CMakeLists.txt
+++ b/src/python-bindings/CMakeLists.txt
@@ -21,6 +21,9 @@ set( HTCONDOR_BINDINGS_SOURCES
     startd.cpp
 )
 
+get_target_property(UTILS_LIB_NAME condor_utils OUTPUT_NAME)
+find_library(CLASSAD_LIBRARY classad)
+
 if(WINDOWS)
   if(WITH_PYTHON_BINDINGS AND ( PYTHONLIBS_FOUND OR PYTHON3LIBS_FOUND ))
     # Modern compilers complain about using the deprecated std::auto_ptr.
@@ -95,7 +98,7 @@ if(WINDOWS)
 				endif()
 
 				condor_shared_lib( pyclassad classad.cpp classad_wrapper.h exprtree_wrapper.h exception_utils.cpp classad_exceptions.cpp )
-				target_link_libraries( pyclassad ${CLASSADS_FOUND} ${THE_BOOST_LIBS} ${PYTHON_LIBRARIES} )
+				target_link_libraries( pyclassad ${CLASSAD_LIBRARY} ${THE_BOOST_LIBS} ${PYTHON_LIBRARIES} )
 				set_target_properties( pyclassad PROPERTIES OUTPUT_NAME "${PYCLASSAD_LIB_NAME}" )
 				target_include_directories( pyclassad PUBLIC ${PYTHON_INCLUDE_DIRS} )
 
@@ -111,13 +114,13 @@ if(WINDOWS)
 				# This is to be used as a CLASSAD_USER_LIBS extension so we can invoke
 				# python functions.
 				add_library( classad_python_user SHARED classad_python_user.cpp )
-				target_link_libraries( classad_python_user condor_utils pyclassad ${CONDOR_WIN_LIBS})
+				target_link_libraries( classad_python_user ${UTILS_LIB_NAME} pyclassad ${CONDOR_WIN_LIBS})
 				set_target_properties(classad_python_user PROPERTIES SUFFIX "${PYTHON_DLL_SUFFIX}" )
 				target_include_directories( classad_python_user PUBLIC ${PYTHON_INCLUDE_DIRS} )
 				install ( TARGETS classad_python_user DESTINATION "${C_LIBEXEC}" )
 
 				add_library( htcondor SHARED htcondor.cpp ${HTCONDOR_BINDINGS_SOURCES} )
-				target_link_libraries( htcondor pyclassad condor_utils ${THE_BOOST_LIBS} ${PYTHON_LIBRARIES} ${CONDOR_WIN_LIBS} )
+				target_link_libraries( htcondor pyclassad ${UTILS_LIB_NAME} ${THE_BOOST_LIBS} ${PYTHON_LIBRARIES} ${CONDOR_WIN_LIBS} )
 				set_target_properties( htcondor PROPERTIES SUFFIX "${PYTHON_DLL_SUFFIX}" )
 				target_include_directories( htcondor PUBLIC ${PYTHON_INCLUDE_DIRS} )
 
@@ -161,7 +164,7 @@ if(WINDOWS)
 					)
 
 				condor_shared_lib( py3classad classad.cpp classad_wrapper.h exprtree_wrapper.h exception_utils.cpp classad_exceptions.cpp )
-				target_link_libraries( py3classad ${CLASSADS_FOUND} ${THE_BOOST_LIBS} ${PYTHON3_LIBRARIES} )
+				target_link_libraries( py3classad ${CLASSAD_LIBRARY} ${THE_BOOST_LIBS} ${PYTHON3_LIBRARIES} )
 				set_target_properties( py3classad PROPERTIES OUTPUT_NAME "${PY3CLASSAD_LIB_NAME}" )
 				target_include_directories( py3classad PUBLIC ${PYTHON3_INCLUDE_DIRS} )
 
@@ -178,14 +181,14 @@ if(WINDOWS)
 				# This is to be used as a CLASSAD_USER_LIBS extension so we can invoke
 				# python functions.
 				add_library( classad_python3_user SHARED classad_python_user.cpp )
-				target_link_libraries( classad_python3_user condor_utils py3classad ${THE_BOOST_LIBS} ${CONDOR_WIN_LIBS})
+				target_link_libraries( classad_python3_user ${UTILS_LIB_NAME} py3classad ${THE_BOOST_LIBS} ${CONDOR_WIN_LIBS})
 				set_target_properties(classad_python3_user PROPERTIES PREFIX "" OUTPUT_NAME classad_python_user PDB_NAME classad_python3_user)
 				set_target_properties(classad_python3_user PROPERTIES SUFFIX "${PYTHON3_DLL_SUFFIX}" )
 				target_include_directories( classad_python3_user PUBLIC ${PYTHON3_INCLUDE_DIRS} )
 				install ( TARGETS classad_python3_user DESTINATION "${C_LIBEXEC}" )
 
 				add_library( py3htcondor SHARED htcondor.cpp ${HTCONDOR_BINDINGS_SOURCES} )
-				target_link_libraries( py3htcondor py3classad condor_utils ${THE_BOOST_LIBS} ${PYTHON3_LIBRARIES} ${CONDOR_WIN_LIBS} )
+				target_link_libraries( py3htcondor py3classad ${UTILS_LIB_NAME} ${THE_BOOST_LIBS} ${PYTHON3_LIBRARIES} ${CONDOR_WIN_LIBS} )
 				set_target_properties( py3htcondor PROPERTIES PREFIX "" OUTPUT_NAME py3htcondor PDB_NAME py3htcondor)
 				set_target_properties( py3htcondor PROPERTIES PREFIX "" RUNTIME_OUTPUT_NAME htcondor PDB_NAME py3htcondor)
 				set_target_properties( py3htcondor PROPERTIES SUFFIX "${PYTHON3_DLL_SUFFIX}" )
@@ -198,21 +201,21 @@ if(WINDOWS)
 
 				add_library(                  py3classad2_impl SHARED classad2_impl.cpp )
 				target_include_directories(   py3classad2_impl PUBLIC ${PYTHON3_INCLUDE_DIRS} )
-				target_link_libraries(        py3classad2_impl ${CLASSADS_FOUND} condor_utils ${PLFN} ${CONDOR_WIN_LIBS} )
+				target_link_libraries(        py3classad2_impl ${CLASSAD_LIBRARY} ${UTILS_LIB_NAME} ${PLFN} ${CONDOR_WIN_LIBS} )
 				set_target_properties(        py3classad2_impl PROPERTIES PREFIX "" OUTPUT_NAME classad2_impl )
 				set_target_properties(        py3classad2_impl PROPERTIES PREFIX "" RUNTIME_OUTPUT_NAME classad2_impl PDB_NAME py3classad2 )
 				set_target_properties(        py3classad2_impl PROPERTIES SUFFIX "${PYTHON3_DLL_SUFFIX}" )
 
 				add_library(                  py3htcondor2_impl SHARED htcondor2_impl.cpp )
 				target_include_directories(   py3htcondor2_impl PUBLIC ${PYTHON3_INCLUDE_DIRS} )
-				target_link_libraries(        py3htcondor2_impl ${CLASSADS_FOUND} condor_utils ${PLFN} ${CONDOR_WIN_LIBS} )
+				target_link_libraries(        py3htcondor2_impl ${CLASSAD_LIBRARY} ${UTILS_LIB_NAME} ${PLFN} ${CONDOR_WIN_LIBS} )
 				set_target_properties(        py3htcondor2_impl PROPERTIES PREFIX "" OUTPUT_NAME htcondor2_impl )
 				set_target_properties(        py3htcondor2_impl PROPERTIES PREFIX "" RUNTIME_OUTPUT_NAME htcondor2_impl PDB_NAME py3htcondor2 )
 				set_target_properties(        py3htcondor2_impl PROPERTIES SUFFIX "${PYTHON3_DLL_SUFFIX}" )
 
 				add_library(                  py3classad3_impl SHARED classad3_impl.cpp )
 				target_include_directories(   py3classad3_impl PUBLIC ${PYTHON3_INCLUDE_DIRS} )
-				target_link_libraries(        py3classad3_impl ${CLASSADS_FOUND} condor_utils ${PLFN} ${CONDOR_WIN_LIBS} )
+				target_link_libraries(        py3classad3_impl ${CLASSAD_LIBRARY} ${UTILS_LIB_NAME} ${PLFN} ${CONDOR_WIN_LIBS} )
 				set_target_properties(        py3classad3_impl PROPERTIES PREFIX "" OUTPUT_NAME classad3_impl )
 				set_target_properties(        py3classad3_impl PROPERTIES PREFIX "" RUNTIME_OUTPUT_NAME classad3_impl PDB_NAME py3classad3 )
 				set_target_properties(        py3classad3_impl PROPERTIES SUFFIX "${PYTHON3_DLL_SUFFIX}" )
@@ -296,7 +299,7 @@ else()
       endif()
       condor_shared_lib( pyclassad classad.cpp classad_wrapper.h exprtree_wrapper.h exception_utils.cpp classad_exceptions.cpp )
       target_include_directories( pyclassad PUBLIC ${PYTHON_INCLUDE_DIRS} )
-      target_link_libraries( pyclassad ${CLASSADS_FOUND} ${PYTHON_BOOST_LIB} ${PYTHON_LIBRARIES} )
+      target_link_libraries( pyclassad ${CLASSAD_LIBRARY} ${PYTHON_BOOST_LIB} ${PYTHON_LIBRARIES} )
       set_target_properties( pyclassad PROPERTIES OUTPUT_NAME "${PYCLASSAD_LIB_NAME}" )
       set_target_properties( pyclassad PROPERTIES COMPILE_FLAGS "-fPIC")
 
@@ -314,7 +317,7 @@ else()
       # python functions.
       add_library( classad_python_user SHARED classad_python_user.cpp )
       target_include_directories( classad_python_user PUBLIC ${PYTHON_INCLUDE_DIRS} )
-      target_link_libraries( classad_python_user condor_utils pyclassad )
+      target_link_libraries( classad_python_user ${UTILS_LIB_NAME} pyclassad )
       set_target_properties(classad_python_user PROPERTIES SUFFIX "${PYTHON_MODULE_SUFFIX}" )
       if ( NOT CMAKE_SKIP_RPATH )
         set_target_properties(classad_python_user PROPERTIES INSTALL_RPATH "${CONDOR_RPATH}")
@@ -326,7 +329,7 @@ else()
       # We should probably deprecate log_reader.cpp (shortly after we deprecate event.cpp).
       add_library( htcondor SHARED htcondor.cpp ${HTCONDOR_BINDINGS_SOURCES} log_reader.cpp )
       target_include_directories( htcondor PUBLIC ${PYTHON_INCLUDE_DIRS} )
-      target_link_libraries( htcondor pyclassad condor_utils ${PYTHON_BOOST_LIB} ${PYTHON_LIBRARIES} )
+      target_link_libraries( htcondor pyclassad ${UTILS_LIB_NAME} ${PYTHON_BOOST_LIB} ${PYTHON_LIBRARIES} )
       set_target_properties( htcondor PROPERTIES PREFIX "" )
       set_target_properties( htcondor PROPERTIES SUFFIX "${PYTHON_MODULE_SUFFIX}" )
       if ( NOT CMAKE_SKIP_RPATH )
@@ -382,7 +385,7 @@ else()
       endif()
       condor_shared_lib( py3classad classad.cpp classad_wrapper.h exprtree_wrapper.h exception_utils.cpp classad_exceptions.cpp )
       target_include_directories( py3classad PUBLIC ${PYTHON3_INCLUDE_DIRS} )
-      target_link_libraries( py3classad ${CLASSADS_FOUND} ${PYTHON3_BOOST_LIB} ${PYTHON3_LIBRARIES} )
+      target_link_libraries( py3classad ${CLASSAD_LIBRARY} ${PYTHON3_BOOST_LIB} ${PYTHON3_LIBRARIES} )
       set_target_properties( py3classad PROPERTIES OUTPUT_NAME "${PY3CLASSAD_LIB_NAME}" )
       set_target_properties( py3classad PROPERTIES COMPILE_FLAGS "-fPIC")
 
@@ -400,7 +403,7 @@ else()
       # python functions.
       add_library( classad_python3_user SHARED classad_python_user.cpp )
       target_include_directories( classad_python3_user PUBLIC ${PYTHON3_INCLUDE_DIRS} )
-      target_link_libraries( classad_python3_user condor_utils py3classad )
+      target_link_libraries( classad_python3_user ${UTILS_LIB_NAME} py3classad )
       set_target_properties( classad_python3_user PROPERTIES OUTPUT_NAME classad_python_user )
       set_target_properties( classad_python3_user PROPERTIES SUFFIX "${PYTHON3_MODULE_SUFFIX}" )
       if ( NOT CMAKE_SKIP_RPATH )
@@ -417,7 +420,7 @@ else()
       # We should probably deprecate log_reader.cpp (shortly after we deprecate event.cpp).
       add_library( py3htcondor SHARED htcondor.cpp ${HTCONDOR_BINDINGS_SOURCES} log_reader.cpp )
       target_include_directories( py3htcondor PUBLIC ${PYTHON3_INCLUDE_DIRS} )
-      target_link_libraries( py3htcondor py3classad condor_utils ${PYTHON3_BOOST_LIB} ${PYTHON3_LIBRARIES} )
+      target_link_libraries( py3htcondor py3classad ${UTILS_LIB_NAME} ${PYTHON3_BOOST_LIB} ${PYTHON3_LIBRARIES} )
       set_target_properties( py3htcondor PROPERTIES PREFIX "" OUTPUT_NAME htcondor )
       set_target_properties( py3htcondor PROPERTIES SUFFIX "${PYTHON3_MODULE_SUFFIX}" )
       if ( NOT CMAKE_SKIP_RPATH )
@@ -435,14 +438,14 @@ else()
 
       add_library(                  py3classad2_impl SHARED classad2_impl.cpp )
       target_include_directories(   py3classad2_impl PUBLIC ${PYTHON3_INCLUDE_DIRS} )
-      target_link_libraries(        py3classad2_impl classad condor_utils ${MAGIC_LINKER_FLAG} )
+      target_link_libraries(        py3classad2_impl classad ${UTILS_LIB_NAME} ${MAGIC_LINKER_FLAG} )
       set_target_properties(        py3classad2_impl PROPERTIES SUFFIX ${MVI_SUFFIX} )
       set_target_properties(        py3classad2_impl PROPERTIES PREFIX "" OUTPUT_NAME classad2_impl )
       set_target_properties(        py3classad2_impl PROPERTIES LIBRARY_OUTPUT_DIRECTORY "${WHEEL_BINARY_DIR}/classad2" )
 
       add_library(                  py3htcondor2_impl SHARED htcondor2_impl.cpp )
       target_include_directories(   py3htcondor2_impl PUBLIC ${PYTHON3_INCLUDE_DIRS} )
-      target_link_libraries(        py3htcondor2_impl classad condor_utils ${MAGIC_LINKER_FLAG} )
+      target_link_libraries(        py3htcondor2_impl classad ${UTILS_LIB_NAME} ${MAGIC_LINKER_FLAG} )
       set_target_properties(        py3htcondor2_impl PROPERTIES SUFFIX ${MVI_SUFFIX} )
       set_target_properties(        py3htcondor2_impl PROPERTIES PREFIX "" OUTPUT_NAME htcondor2_impl )
       set_target_properties(        py3htcondor2_impl PROPERTIES LIBRARY_OUTPUT_DIRECTORY "${WHEEL_BINARY_DIR}/htcondor2" )
@@ -450,7 +453,7 @@ else()
 
       add_library(                  py3classad3_impl SHARED classad3_impl.cpp )
       target_include_directories(   py3classad3_impl PUBLIC ${PYTHON3_INCLUDE_DIRS} )
-      target_link_libraries(        py3classad3_impl classad condor_utils ${PYTHON3_LIBRARIES} )
+      target_link_libraries(        py3classad3_impl classad ${UTILS_LIB_NAME} ${PYTHON3_LIBRARIES} )
       set_target_properties(        py3classad3_impl PROPERTIES PREFIX "" OUTPUT_NAME classad3_impl )
       set_target_properties(        py3classad3_impl PROPERTIES SUFFIX "${PYTHON3_MODULE_SUFFIX}" )
 
@@ -497,7 +500,7 @@ else()
 
       # build libpyclassad *not* linked against libpython
       add_library( wheel_pyclassad SHARED classad.cpp classad_wrapper.h exprtree_wrapper.h exception_utils.cpp classad_exceptions.cpp )
-      target_link_libraries( wheel_pyclassad ${CLASSADS_FOUND} ${PYTHON3_BOOST_LIB} ${NOLINK_PYTHON_LIB} )
+      target_link_libraries( wheel_pyclassad ${CLASSAD_LIBRARY} ${PYTHON3_BOOST_LIB} ${NOLINK_PYTHON_LIB} )
       if ( APPLE )
         set_target_properties( wheel_pyclassad PROPERTIES SUFFIX ".dylib" )
         set_target_properties( wheel_pyclassad PROPERTIES INSTALL_NAME_DIR "${WHEEL_BINARY_DIR}/htcondor/htcondor_libs" )
@@ -520,7 +523,7 @@ else()
       # finally, build the htcondor module *not* linked against libpython
       # See note above about deprecating log_reader.cpp.
       add_library( wheel_htcondor SHARED htcondor.cpp ${HTCONDOR_BINDINGS_SOURCES} log_reader.cpp )
-      target_link_libraries( wheel_htcondor wheel_pyclassad condor_utils ${PYTHON3_BOOST_LIB} ${NOLINK_PYTHON_LIB} )
+      target_link_libraries( wheel_htcondor wheel_pyclassad ${UTILS_LIB_NAME} ${PYTHON3_BOOST_LIB} ${NOLINK_PYTHON_LIB} )
       set_target_properties( wheel_htcondor PROPERTIES PREFIX "" OUTPUT_NAME "htcondor" SUFFIX ".so")
       set_target_properties( wheel_htcondor PROPERTIES LIBRARY_OUTPUT_DIRECTORY "${WHEEL_BINARY_DIR}/htcondor" )
       if ( NOT APPLE )
-- 
2.39.2

